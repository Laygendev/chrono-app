// üìÅ src/App.js (s√©paration fond draggable / contenu UI pour √©viter le bug d'opacity)
import React, { useEffect, useState } from 'react';
import TimerCard from './components/TimerCard';
import './App.css';
import { Plus, X } from 'lucide-react';
import { AnimatePresence, motion, LayoutGroup } from 'framer-motion';
import AnimatedBackground from './components/AnimatedBackground';

const COLORS = [
  'bg-pink-100',
  'bg-blue-100',
  'bg-green-100',
  'bg-yellow-100',
  'bg-purple-100',
  'bg-orange-100',
  'bg-red-100',
  'bg-cyan-100',
  'bg-lime-100',
];

const App = () => {
  const [isLoading, setIsLoading] = useState(true);
  const [timers, setTimers] = useState([crypto.randomUUID()]);
  const [activeTimers, setActiveTimers] = useState({});
  const [activeTimerId, setActiveTimerId] = useState(null);
  const [checkingProject, setCheckingProject] = useState(null);
  const [progress, setProgress] = useState({ current: 0, total: 1 }); // √©viter division par 0
  const [projectList, setProjectList] = useState([]);

  const positiveMessages = [
    "Respire‚Ä¶ ou alors mange du chocolat, √ßa marche aussi.",
    "M√©diter, c‚Äôest comme faire une sieste‚Ä¶ mais en pr√©tendant √™tre spirituel.",
    "Mon karma a pris un caf√© ce matin, tout va bien.",
    "Je suis en paix‚Ä¶ tant que personne ne me parle avant mon caf√©.",
    "Aujourd‚Äôhui, je choisis la paix. Demain, je verrai selon mon niveau de sommeil.",
    "Le calme int√©rieur, c‚Äôest quand ton cerveau ne fait plus de karaok√© √† 3h du matin.",
    "J‚Äôai l√¢ch√© prise‚Ä¶ surtout sur le m√©nage.",
    "Souris √† la vie, elle est souvent moins s√©rieuse que toi.",
    "J‚Äôavance lentement, mais je ne recule que pour prendre de l‚Äô√©lan (ou trouver du Wi-Fi).",
    "Mon mantra du jour : \"Ce n‚Äôest pas grave\".",
    "J‚Äôai trouv√© mon √©quilibre : une main sur un cookie, l‚Äôautre sur une tisane.",
    "Zen, mais pr√™t¬∑e √† courir si quelqu‚Äôun me pique mon coussin pr√©f√©r√©.",
    "Aujourd‚Äôhui, je rayonne‚Ä¶ surtout de sarcasme, mais c‚Äôest d√©j√† √ßa.",
    "Mon esprit est comme un lac paisible‚Ä¶ sauf quand on y jette un caillou nomm√© \"emails\".",
    "Rester calme, c‚Äôest un art. Et moi, je suis encore en brouillon.",
    "Le bonheur est √† l‚Äôint√©rieur‚Ä¶ sauf s‚Äôil y a des cr√™pes √† l‚Äôext√©rieur.",
    "Chaque probl√®me a une solution. Parfois, c‚Äôest juste une sieste.",
    "J‚Äôai trouv√© l‚Äô√©quilibre : moiti√© zen, moiti√© bord√©lique.",
    "Je suis align√©¬∑e‚Ä¶ surtout avec mon canap√©.",
    "Aujourd‚Äôhui, je suis une bougie parfum√©e : paisible mais capable de tout br√ªler si on m‚Äô√©nerve.",
    "Je ne stresse pas‚Ä¶ je pratique le cardio int√©rieur.",
    "J‚Äôai atteint la pleine conscience‚Ä¶ en r√©alisant que j‚Äôavais oubli√© mes cl√©s.",
    "Mon chakra pr√©f√©r√©, c‚Äôest celui qui m‚Äôautorise √† faire la sieste.",
    "Respire profond√©ment‚Ä¶ mais pas trop, faut pas s‚Äôendormir au bureau.",
    "Je suis un¬∑e guerrier¬∑√®re de la paix‚Ä¶ mais avec des snacks.",
    "M√©diter, c‚Äôest comme faire un reset sans avoir besoin de red√©marrer Windows.",
    "Mon aura est propre, mais ma cuisine un peu moins.",
    "Je suis serein¬∑e‚Ä¶ jusqu‚Äô√† ce que la batterie du t√©l√©phone tombe √† 1%.",
    "J‚Äôaccueille le moment pr√©sent‚Ä¶ sauf s‚Äôil sonne √† la porte sans pr√©venir.",
    "Je suis une plante : j‚Äôai besoin de soleil, d‚Äôeau, et qu‚Äôon me foute la paix.",
    "J‚Äôai transcend√© l‚Äôagitation‚Ä¶ surtout depuis que j‚Äôai d√©sactiv√© les notifications.",
    "Je cultive le l√¢cher-prise‚Ä¶ surtout sur les t√¢ches m√©nag√®res.",
    "Paix, amour et cookies maison.",
    "Je suis centr√©¬∑e. Bon, pas toujours droit, mais centr√©¬∑e.",
    "Mon esprit est comme un ciel bleu‚Ä¶ parfois perturb√© par des nuages en forme de ‚ÄúTo-Do list‚Äù.",
    "J‚Äôai atteint l‚Äôillumination‚Ä¶ en retrouvant un vieux billet dans ma poche.",
    "√ätre zen, c‚Äôest ignorer les gens qui m√¢chent fort.",
    "Je suis √† deux respirations profondes d‚Äôenvoyer tout valser, mais je tiens.",
    "L‚Äôunivers m‚Äôenvoie des signes‚Ä¶ souvent en majuscules.",
    "La paix int√©rieure, c‚Äôest savoir que tu peux dire ‚Äúnon‚Äù sans te justifier (et sans culpabiliser‚Ä¶ trop)."
  ];

  const [motivationText, setMotivationText] = useState(positiveMessages[0]);

  useEffect(() => {
    let remainingMessages = [...positiveMessages];
    const usedMessages = [];

    const updateMessage = () => {
      if (remainingMessages.length === 0) {
        remainingMessages = [...usedMessages];
        usedMessages.length = 0;
      }

      const randomIndex = Math.floor(Math.random() * remainingMessages.length);
      const nextMessage = remainingMessages.splice(randomIndex, 1)[0];
      usedMessages.push(nextMessage);
      setMotivationText(nextMessage);
    };

    updateMessage(); // premier message
    const interval = setInterval(updateMessage, 3000);
    const timeout = setTimeout(() => {
      clearInterval(interval);
      setTimeout(() => setIsLoading(false), 1000);
    }, 15000);

    return () => {
      clearInterval(interval);
      clearTimeout(timeout);
    };
  }, []);

  useEffect(() => {
    // ‚ö° Charge l'√©tat global si jamais l'event est pass√© avant l'ouverture de la modale
    window.electron.ipcRenderer.invoke('get-projects')
      .then((projects) => {
        if (Array.isArray(projects)) {
          setProjectList(projects);
        }
      });

    // ‚úÖ √âcoute les mises √† jour en live
    const handleStatus = (_, updatedProject) => {
      setProjectList((prevList) => {
        const existingIndex = prevList.findIndex(p => p.nomProjet === updatedProject.nomProjet);
        if (existingIndex !== -1) {
          const updated = [...prevList];
          updated[existingIndex] = updatedProject;
          return updated;
        }
        return [...prevList, updatedProject];
      });
    };

    window.electron.ipcRenderer.on('project-status', handleStatus);

    return () => {
      window.electron.ipcRenderer.removeListener('project-status', handleStatus);
    };
  }, []);

  useEffect(() => {
    const handler = (_, { name, current, total }) => {
      setCheckingProject(name);
      setProgress({ current, total });
    };

    window.electron.ipcRenderer.on("project-checking", handler);

    return () => {
      window.electron.ipcRenderer.removeListener("project-checking", handler);
    };
  }, []);

  useEffect(() => {
    // window.electron.ipcRenderer.on('app-loaded', () => setIsLoading(false));
  }, []);

  useEffect(() => {
    const handleReminder = () => {
      new Notification("üí° Pense √† relancer le chrono", {
        body: "Tu viens de d√©verrouiller l‚Äô√©cran.",
      });
    };

    window.electron?.ipcRenderer?.on("notify-unlock-reminder", handleReminder);

    return () => {
      window.electron?.ipcRenderer?.removeListener("notify-unlock-reminder", handleReminder);
    };
  }, []);

  const addTimer = () => {
    const newId = crypto.randomUUID();
    setTimers(prev => [...prev, newId]);
  };

  // Supprimer un chrono par son ID
  const deleteTimer = (id) => {
    setTimers(prev => prev.filter(timer => timer !== id));
    setActiveTimers(prev => {
      const next = { ...prev };
      delete next[id];
      return next;
    });
    if (activeTimerId === id) {
      setActiveTimerId(null);
    }
  };

  const closeWindow = () => {
    if (window?.electron?.ipcRenderer) {
      window.electron.ipcRenderer.send('close-window');
    } else {
      window.close();
    }
  };

  const updateRunningStatus = (id, isRunning) => {
    setActiveTimers(prev => ({ ...prev, [id]: isRunning }));
  };

  useEffect(() => {
    const interval = setInterval(() => {
      const anyRunning = Object.values(activeTimers).some(Boolean);
      if (anyRunning) {
        new Notification('‚è±Ô∏è Chrono actif', {
          body: 'Un chrono est en cours.',
        });
      } else {
        new Notification('‚õî Aucun chrono actif', {
          body: 'Attention ! Aucun chrono n‚Äôest actuellement en cours.',
        });
      }
    }, 10 * 60 * 1000); // 10 minutes

    return () => clearInterval(interval);
  }, [activeTimers]);

  return (
    <>
      <AnimatePresence>
        {isLoading && (
          <AnimatedBackground
            key="loading"
            loadingText="Chargement"
            subText={motivationText}
          />
        )}
      </AnimatePresence>

      {!isLoading && (
        <div className="min-h-screen relative text-black">
          {/* Zone draggable invisible derri√®re tout */}
          <div className="absolute inset-0 -z-10 drag overflow-hidden">
            {Object.values(activeTimers).some(Boolean) && <AnimatedBackground />}
          </div>

          {/* Contenu UI non draggable */}
          <div className="relative flex flex-col p-2">
            <div className="absolute top-0 right-0 z-10 p-2">
              <button
                onClick={closeWindow}
                className="text-sm text-gray-600 hover:text-black"
              >
                <X size={20} />
              </button>
            </div>

            <LayoutGroup>
              <div className="flex flex-col gap-1 overflow-auto mt-6">
                <AnimatePresence initial={false}>
                  {timers.length === 0 && (
                    <div className="text-center text-gray-500 italic my-4">
                      Cliquez sur{' '}
                      <span className="inline-flex items-center gap-1 px-2 py-0.5 bg-gray-200 rounded text-sm">
                        <Plus size={14} /> Chrono
                      </span>{' '}
                      pour ajouter un minuteur
                    </div>
                  )}

                  {timers.map((id, index) => {
                    const colorClass = COLORS[index % COLORS.length];

                    return (
                      <motion.div
                        key={id}
                        initial={{ opacity: 0, x: 100 }}
                        animate={{ opacity: 1, x: 0 }}
                        exit={{ opacity: 0, x: 300 }}
                        transition={{ type: 'spring', duration: 0.4 }}
                      >
                        <TimerCard
                          id={id}
                          onDelete={deleteTimer}
                          onRunningChange={updateRunningStatus}
                          isActive={activeTimerId === id}
                          onActivate={() => setActiveTimerId(id)}
                          color={colorClass}
                          projectList={projectList}
                          setProjectList={setProjectList}
                        />
                      </motion.div>
                    );
                  })}
                </AnimatePresence>
              </div>
            </LayoutGroup>
            <div className="mt-2 text-center flex justify-end">
              <button
                onClick={addTimer}
                className="text-sm px-3 py-1 bg-gray-200 hover:bg-gray-300 rounded flex justify-end"
              >
                <Plus size={18} /> Chrono
              </button>
            </div>
          </div>
        </div>
      )}
    </>
  );
};

export default App;